# 
# Generated by fetch-leetcode-submission project on GitHub.
# https://github.com/gitzhou/fetch-leetcode-submission
# Contact Me: aaron67[AT]aaron67.cc
# 
# Evaluate Division
# https://leetcode.com/problems/evaluate-division/
# 

class Solution(object):
    def search(self, dic, source, target, prev, res):
        adjlist = dic.get(source, [])
        if adjlist != []:
            for a_adj in adjlist:
                if a_adj[0] != prev:
                    res *= a_adj[1]
                    if a_adj[0] == target:
                        return res
                    else:
                        local_res = self.search(dic, a_adj[0], target, source, res)
                        if local_res is None:
                            res /= a_adj[1]
                            continue
                        else:
                            return local_res

        return None


    def calcEquation(self, equations, values, queries):
        """
        :type equations: List[List[str]]
        :type values: List[float]
        :type queries: List[List[str]]
        :rtype: List[float]
        """
        ans = []
        dic = {}
        for i, equation in enumerate(equations):
            dic.setdefault(equation[0], []).append([equation[1], values[i]])
            dic.setdefault(equation[1], []).append([equation[0], 1 / values[i]])

        for query in queries:
            
            if query[0] not in dic or query[1] not in dic:
                ans.append(-1.0)
            elif query[0] == query[1]:
                ans.append(1.0)
            elif query in equations:
                adj = dic.get(query[0])
                for a_adj in adj:
                    if a_adj[0] == query[1]:
                        ans.append(a_adj[1])
                        break
            else:
                result = self.search(dic, query[0], query[1], None, 1.0)
                if result is not None:
                    ans.append(result)
                else:
                    ans.append(-1.0)
        return ans

